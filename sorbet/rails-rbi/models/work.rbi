# This is an autogenerated file for dynamic methods in Work
# Please rerun bundle exec rake rails_rbi:models[Work] to regenerate.

# typed: strong
module Work::EnumInstanceMethods
  sig { returns(T::Boolean) }
  def stanford?; end

  sig { void }
  def stanford!; end

  sig { returns(T::Boolean) }
  def world?; end

  sig { void }
  def world!; end
end

module Work::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Work::GeneratedAttributeMethods
  sig { returns(String) }
  def abstract; end

  sig { params(value: T.any(String, Symbol)).void }
  def abstract=(value); end

  sig { returns(T::Boolean) }
  def abstract?; end

  sig { returns(String) }
  def access; end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def access=(value); end

  sig { returns(T::Boolean) }
  def access?; end

  sig { returns(T.nilable(T::Boolean)) }
  def agree_to_terms; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def agree_to_terms=(value); end

  sig { returns(T::Boolean) }
  def agree_to_terms?; end

  sig { returns(String) }
  def citation; end

  sig { params(value: T.any(String, Symbol)).void }
  def citation=(value); end

  sig { returns(T::Boolean) }
  def citation?; end

  sig { returns(Integer) }
  def collection_id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def collection_id=(value); end

  sig { returns(T::Boolean) }
  def collection_id?; end

  sig { returns(String) }
  def contact_email; end

  sig { params(value: T.any(String, Symbol)).void }
  def contact_email=(value); end

  sig { returns(T::Boolean) }
  def contact_email?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def created_edtf; end

  sig { params(value: T.any(String, Symbol)).void }
  def created_edtf=(value); end

  sig { returns(T::Boolean) }
  def created_edtf?; end

  sig { returns(T.nilable(String)) }
  def druid; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def druid=(value); end

  sig { returns(T::Boolean) }
  def druid?; end

  sig { returns(T.nilable(Date)) }
  def embargo_date; end

  sig { params(value: T.nilable(Date)).void }
  def embargo_date=(value); end

  sig { returns(T::Boolean) }
  def embargo_date?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def license; end

  sig { params(value: T.any(String, Symbol)).void }
  def license=(value); end

  sig { returns(T::Boolean) }
  def license?; end

  sig { returns(String) }
  def state; end

  sig { params(value: T.any(String, Symbol)).void }
  def state=(value); end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(String) }
  def subtype; end

  sig { params(value: T.any(String, Symbol)).void }
  def subtype=(value); end

  sig { returns(T::Boolean) }
  def subtype?; end

  sig { returns(String) }
  def title; end

  sig { params(value: T.any(String, Symbol)).void }
  def title=(value); end

  sig { returns(T::Boolean) }
  def title?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(Integer)) }
  def version; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def version=(value); end

  sig { returns(T::Boolean) }
  def version?; end

  sig { returns(String) }
  def work_type; end

  sig { params(value: T.any(String, Symbol)).void }
  def work_type=(value); end

  sig { returns(T::Boolean) }
  def work_type?; end
end

class Work::Access < T::Enum
  enums do
    Stanford = new(%q{stanford})
    World = new(%q{world})
  end

end

module Work::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Work]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Work]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Work]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Work)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Work) }
  def find_by_id!(id); end
end

class Work < ApplicationRecord
  include Work::EnumInstanceMethods
  include Work::GeneratedAttributeMethods
  include Work::GeneratedAssociationMethods
  extend Work::CustomFinderMethods
  extend Work::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Work::ActiveRecord_Relation, Work::ActiveRecord_Associations_CollectionProxy, Work::ActiveRecord_AssociationRelation) }

  sig { returns(T::Hash[T.any(String, Symbol), String]) }
  def self.accesses; end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def self.not_stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def self.not_world(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def self.stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def self.with_attached_files(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def self.world(*args); end

  sig { returns(Work::Access) }
  def typed_access; end

  sig { params(value: Work::Access).void }
  def typed_access=(value); end
end

class Work::ActiveRecord_Relation < ActiveRecord::Relation
  include Work::ActiveRelation_WhereNot
  include Work::CustomFinderMethods
  include Work::QueryMethodsReturningRelation
  Elem = type_member(fixed: Work)

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def not_stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def not_world(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def with_attached_files(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def world(*args); end
end

class Work::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Work::ActiveRelation_WhereNot
  include Work::CustomFinderMethods
  include Work::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Work)

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def not_stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def not_world(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def with_attached_files(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def world(*args); end
end

class Work::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Work::CustomFinderMethods
  include Work::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Work)

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def not_stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def not_world(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def stanford(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def with_attached_files(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def world(*args); end

  sig { params(records: T.any(Work, T::Array[Work])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Work, T::Array[Work])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Work, T::Array[Work])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Work, T::Array[Work])).returns(T.self_type) }
  def concat(*records); end
end

module Work::QueryMethodsReturningRelation
  sig { returns(Work::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Work::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Work::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Work::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Work::QueryMethodsReturningAssociationRelation
  sig { returns(Work::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Work::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Work::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Work::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Work::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Work::GeneratedAssociationMethods
  sig { returns(::Collection) }
  def collection; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Collection).void)).returns(::Collection) }
  def build_collection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Collection).void)).returns(::Collection) }
  def create_collection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Collection).void)).returns(::Collection) }
  def create_collection!(*args, &block); end

  sig { params(value: ::Collection).void }
  def collection=(value); end

  sig { returns(::Contributor::ActiveRecord_Associations_CollectionProxy) }
  def contributors; end

  sig { returns(T::Array[Integer]) }
  def contributor_ids; end

  sig { params(value: T::Enumerable[::Contributor]).void }
  def contributors=(value); end

  sig { returns(::ActiveStorage::Attachment::ActiveRecord_Associations_CollectionProxy) }
  def files_attachments; end

  sig { returns(T::Array[Integer]) }
  def files_attachment_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
  def files_attachments=(value); end

  sig { returns(::ActiveStorage::Blob::ActiveRecord_Associations_CollectionProxy) }
  def files_blobs; end

  sig { returns(T::Array[Integer]) }
  def files_blob_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Blob]).void }
  def files_blobs=(value); end

  sig { returns(::RelatedLink::ActiveRecord_Associations_CollectionProxy) }
  def related_links; end

  sig { returns(T::Array[Integer]) }
  def related_link_ids; end

  sig { params(value: T::Enumerable[::RelatedLink]).void }
  def related_links=(value); end

  sig { returns(::RelatedWork::ActiveRecord_Associations_CollectionProxy) }
  def related_works; end

  sig { returns(T::Array[Integer]) }
  def related_work_ids; end

  sig { params(value: T::Enumerable[::RelatedWork]).void }
  def related_works=(value); end

  sig { returns(T.nilable(ActiveStorage::Attached::Many)) }
  def files; end

  sig { params(attachables: T.untyped).returns(T.untyped) }
  def files=(attachables); end
end
